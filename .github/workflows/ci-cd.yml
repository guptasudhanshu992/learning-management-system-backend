name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 isort
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with Black
      run: |
        black --check .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only .
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
      env:
        DATABASE_URL: sqlite:///./test.db
        SECRET_KEY: test-secret-key
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Check for known security vulnerabilities
      run: |
        safety check

  deploy-koyeb:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Koyeb CLI
      run: |
        curl -L "https://github.com/koyeb/koyeb-cli/releases/latest/download/koyeb-cli_linux_amd64.tar.gz" | tar xz
        sudo mv koyeb /usr/local/bin/
        koyeb version
    
    - name: Deploy to Koyeb
      run: |
        # Set up Koyeb authentication
        koyeb config set token ${{ secrets.KOYEB_TOKEN }}
        
        # Deploy or update the service
        if koyeb services get api --app lms-backend &> /dev/null; then
          echo "Updating existing service..."
          koyeb services redeploy api --app lms-backend
        else
          echo "Creating new service..."
          koyeb services create api \
            --app lms-backend \
            --git "github.com/${{ github.repository }}" \
            --git-branch main \
            --git-build-command "pip install -r requirements.txt" \
            --git-run-command "uvicorn main:app --host 0.0.0.0 --port 8000" \
            --ports 8000:http \
            --routes "/:8000" \
            --env SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --env ALGORITHM=HS256 \
            --env ACCESS_TOKEN_EXPIRE_MINUTES=30 \
            --env PROJECT_NAME="Learning Management System API" \
            --env VERSION=1.0.0 \
            --env DEBUG=False \
            --env ENVIRONMENT=production \
            --instance-type nano
        fi
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}